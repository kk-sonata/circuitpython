# SPDX-FileCopyrightText: 2014 MicroPython & CircuitPython contributors (https://github.com/adafruit/circuitpython/graphs/contributors)
#
# SPDX-License-Identifier: MIT

name: Build CI

on:
  push:
  pull_request:
  release:
    types: [published]
  check_suite:
    types: [rerequested]

jobs:
  test:
    runs-on: ubuntu-20.04
    outputs:
      arm-boards: ${{ steps.set-matrix.outputs.arm-boards }}
      riscv-boards: ${{ steps.set-matrix.outputs.riscv-boards }}
      espressif-boards: ${{ steps.set-matrix.outputs.espressif-boards }}
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2.2.0
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/adafruit/circuitpython refs/tags/*:refs/tags/*
    - name: CircuitPython version
      run: |
        git describe --dirty --tags
        echo >>$GITHUB_ENV CP_VERSION=$(git describe --dirty --tags)
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install deps
      run: |
        sudo apt-get update
        sudo apt-get install -y eatmydata
        sudo eatmydata apt-get install -y gettext librsvg2-bin mingw-w64 latexmk texlive-fonts-recommended texlive-latex-recommended texlive-latex-extra gcc-aarch64-linux-gnu
        pip install -r requirements-dev.txt
    - name: Versions
      run: |
        gcc --version
        python3 --version
    - name: Duplicate USB VID/PID Check
      run: python3 -u -m tools.ci_check_duplicate_usb_vid_pid
    - name: Build and Validate Stubs
      run: make check-stubs -j2
    - uses: actions/upload-artifact@v2
      with:
        name: stubs
        path: circuitpython-stubs/dist/*
    - name: Install pypi dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Test Documentation Build (HTML)
      run: sphinx-build -E -W -b html -D version=${{ env.CP_VERSION }} -D release=${{ env.CP_VERSION }} . _build/html
    - uses: actions/upload-artifact@v2
      with:
        name: docs
        path: _build/html
    - name: Test Documentation Build (LaTeX/PDF)
      run: |
        make latexpdf
    - uses: actions/upload-artifact@v2
      with:
        name: docs
        path: _build/latex
    - name: Build mpy-cross
      run: make -C mpy-cross -j2
    - name: Build unix port
      run: |
        make -C ports/unix VARIANT=coverage -j2
    - name: Test all
      run: MICROPY_CPYTHON3=python3.8 MICROPY_MICROPYTHON=../ports/unix/micropython-coverage ./run-tests.py -j1
      working-directory: tests
    - name: Print failure info
      run: MICROPY_CPYTHON3=python3.8 MICROPY_MICROPYTHON=../ports/unix/micropython-coverage ./run-tests.py -j1 --print-failures
      if: failure()
      working-directory: tests
    - name: Native Tests
      run: MICROPY_CPYTHON3=python3.8 MICROPY_MICROPYTHON=../ports/unix/micropython-coverage ./run-tests.py -j1 --emit native
      working-directory: tests
    - name: mpy Tests
      run: MICROPY_CPYTHON3=python3.8 MICROPY_MICROPYTHON=../ports/unix/micropython-coverage ./run-tests.py -j1 --mpy-cross-flags='-mcache-lookup-bc' --via-mpy -d basics float micropython
      working-directory: tests
    - name: Native mpy Tests
      run: MICROPY_CPYTHON3=python3.8 MICROPY_MICROPYTHON=../ports/unix/micropython-coverage ./run-tests.py -j1 --mpy-cross-flags='-mcache-lookup-bc' --via-mpy --emit native -d basics float micropython
      working-directory: tests
    - name: Build mpy-cross.static-aarch64
      run: make -C mpy-cross -j2 -f Makefile.static-aarch64
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross.static-aarch64
        path: mpy-cross/mpy-cross.static-aarch64
    - name: Build mpy-cross.static-raspbian
      run: make -C mpy-cross -j2 -f Makefile.static-raspbian
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross.static-raspbian
        path: mpy-cross/mpy-cross.static-raspbian
    - name: Build mpy-cross.static
      run: make -C mpy-cross -j2 -f Makefile.static
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross.static-amd64-linux
        path: mpy-cross/mpy-cross.static
    - name: Build mpy-cross.static-mingw
      run: make -C mpy-cross -j2 -f Makefile.static-mingw
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross.static-x64-windows
        path: mpy-cross/mpy-cross.static.exe
    - name: Upload mpy-cross builds to S3
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit') || (github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'rerequested'))
      env:
        AWS_PAGER: ''
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross.static-aarch64 s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross.static-aarch64-${{ env.CP_VERSION }} --no-progress --region us-east-1
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross.static-raspbian s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross.static-raspbian-${{ env.CP_VERSION }} --no-progress --region us-east-1
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross.static s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross.static-amd64-linux-${{ env.CP_VERSION }} --no-progress --region us-east-1
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross.static.exe s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross.static-x64-windows-${{ env.CP_VERSION }}.exe --no-progress --region us-east-1
        zip -9r circuitpython-stubs.zip circuitpython-stubs
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp circuitpython-stubs/dist/*.tar.gz s3://adafruit-circuit-python/bin/stubs/circuitpython-stubs-${{ env.CP_VERSION }}.zip --no-progress --region us-east-1

    - name: Upload stubs to PyPi
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit'
      env:
        TWINE_USERNAME: ${{ secrets.pypi_username }}
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        # setup.py sdist was run by 'make stubs'
        [ -z "$TWINE_USERNAME" ] || echo "Uploading dev release to PyPi"
        [ -z "$TWINE_USERNAME" ] || twine upload circuitpython-stubs/dist/*
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        # Enable listing of files matching each filter.
        # Paths to files will be available in `${FILTER_NAME}_files` output variable.
        # Paths will be formatted as JSON array
        list-files: json

        # Compare against this branch. (Ignored for PRs.)
        base: ${{ github.ref }}

        # In this example all changed files are passed to the following action to do
        # some custom processing.
        filters: |
          changed:
            - '**'
    - name: "Set boards to build"
      id: set-matrix
      working-directory: tools
      env:
        CHANGED_FILES: ${{ steps.filter.outputs.changed_files }}
      run: |
        python3 -u ci_changed_board_list.py

  mpy-cross-mac:
    runs-on: macos-10.15
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2.2.0
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/adafruit/circuitpython refs/tags/*:refs/tags/*
    - name: CircuitPython version
      run: |
        git describe --dirty --tags
        echo >>$GITHUB_ENV CP_VERSION=$(git describe --dirty --tags)
    - name: Install dependencies
      run: |
        brew install gettext
        echo >>$GITHUB_PATH /usr/local/opt/gettext/bin
    - name: Versions
      run: |
        gcc --version
        python3 --version
        msgfmt --version
    - name: Build mpy-cross
      run: make -C mpy-cross -j2
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross-macos-catalina
        path: mpy-cross/mpy-cross
    - name: Select SDK for M1 build
      run: sudo xcode-select -switch /Applications/Xcode_12.3.app
    - name: Build mpy-cross (arm64)
      run: make -C mpy-cross -j2 -f Makefile.m1 V=2
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross-macos-bigsur-arm64
        path: mpy-cross/mpy-cross-arm64
    - name: Make universal binary
      run: lipo -create -output mpy-cross-macos-universal mpy-cross/mpy-cross mpy-cross/mpy-cross-arm64
    - uses: actions/upload-artifact@v2
      with:
        name: mpy-cross-macos-universal
        path: mpy-cross-macos-universal
    - name: Upload mpy-cross build to S3
      run: |
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross-macos-universal s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross-macos-universal-${{ env.CP_VERSION }} --no-progress --region us-east-1
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross-arm64 s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross-macos-bigsur-${{ env.CP_VERSION }}-arm64 --no-progress --region us-east-1
        [ -z "$AWS_ACCESS_KEY_ID" ] || aws s3 cp mpy-cross/mpy-cross s3://adafruit-circuit-python/bin/mpy-cross/mpy-cross-macos-catalina-${{ env.CP_VERSION }} --no-progress --region us-east-1
      env:
        AWS_PAGER: ''
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit') || (github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'rerequested'))


  build-arm:
    runs-on: ubuntu-20.04
    needs: test
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJSON(needs.test.outputs.arm-boards) }}
    if: ${{ needs.test.outputs.arm-boards != '[]' }}

    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/checkout@v2.2.0
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/adafruit/circuitpython refs/tags/*:refs/tags/*
    - name: Install deps
      run: |
        sudo apt-get install -y gettext
        pip install -r requirements-dev.txt
        wget --no-verbose https://adafruit-circuit-python.s3.amazonaws.com/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        sudo tar -C /usr --strip-components=1 -xaf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
    - name: Versions
      run: |
        gcc --version
        arm-none-eabi-gcc --version
        python3 --version
    - name: mpy-cross
      run: make -C mpy-cross -j2
    - name: Setup build failure matcher
      run: echo "::add-matcher::$GITHUB_WORKSPACE/.github/workflows/match-build-fail.json"
    - name: build
      run: python3 -u build_release_files.py
      working-directory: tools
      env:
        BOARDS: ${{ matrix.board }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.board }}
        path: bin/${{ matrix.board }}
    - name: Upload to S3
      run: "[ -z \"$AWS_ACCESS_KEY_ID\" ] || aws s3 cp bin/ s3://adafruit-circuit-python/bin/ --recursive --no-progress --region us-east-1"
      env:
        AWS_PAGER: ''
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit') || (github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'rerequested'))

  build-riscv:
    runs-on: ubuntu-20.04
    needs: test
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJSON(needs.test.outputs.riscv-boards) }}
    if: ${{ needs.test.outputs.riscv-boards != '[]' }}

    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/checkout@v2.2.0
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/adafruit/circuitpython refs/tags/*:refs/tags/*
    - name: Install deps
      run: |
        sudo apt-get install -y gettext
        pip install -r requirements-dev.txt
        wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-centos6.tar.gz
        sudo tar -C /usr --strip-components=1 -xaf riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-centos6.tar.gz
    - name: Versions
      run: |
        gcc --version
        riscv64-unknown-elf-gcc --version
        python3 --version
    - name: mpy-cross
      run: make -C mpy-cross -j2
    - name: Setup build failure matcher
      run: echo "::add-matcher::$GITHUB_WORKSPACE/.github/workflows/match-build-fail.json"
    - name: build
      run: python3 -u build_release_files.py
      working-directory: tools
      env:
        BOARDS: ${{ matrix.board }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.board }}
        path: bin/${{ matrix.board }}
    - name: Upload to S3
      run: "[ -z \"$AWS_ACCESS_KEY_ID\" ] || aws s3 cp bin/ s3://adafruit-circuit-python/bin/ --recursive --no-progress --region us-east-1"
      env:
        AWS_PAGER: ''
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit') || (github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'rerequested'))
  build-espressif:
    runs-on: ubuntu-20.04
    needs: test
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJSON(needs.test.outputs.espressif-boards) }}
    if: ${{ needs.test.outputs.espressif-boards != '[]' }}

    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/checkout@v2.2.0
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/adafruit/circuitpython refs/tags/*:refs/tags/*
    - name: CircuitPython version
      run: git describe --dirty --tags
    - uses: actions/cache@v2
      name: Fetch IDF tool cache
      id: idf-cache
      with:
        path: ${{ github.workspace }}/.idf_tools
        key: ${{ runner.os }}-idf-tools-${{ hashFiles('.git/modules/ports/espressif/esp-idf/HEAD') }}-20210716
    - name: Clone IDF submodules
      run: |
        (cd $IDF_PATH && git submodule update --init)
      env:
        IDF_PATH: ${{ github.workspace }}/ports/espressif/esp-idf
    - name: Install IDF tools
      run: |
        $IDF_PATH/tools/idf_tools.py --non-interactive install required
        $IDF_PATH/tools/idf_tools.py --non-interactive install cmake
        $IDF_PATH/tools/idf_tools.py --non-interactive install-python-env
        rm -rf $IDF_TOOLS_PATH/dist
      env:
        IDF_PATH: ${{ github.workspace }}/ports/espressif/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools
    - name: Install CircuitPython deps
      run: |
        source $IDF_PATH/export.sh
        pip install -r requirements-dev.txt
        sudo apt-get install -y gettext ninja-build
      env:
        IDF_PATH: ${{ github.workspace }}/ports/espressif/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools
    - name: Versions
      run: |
        source $IDF_PATH/export.sh
        gcc --version
        xtensa-esp32s2-elf-gcc --version
        python3 --version
        ninja --version
        cmake --version
      shell: bash
      env:
        IDF_PATH: ${{ github.workspace }}/ports/espressif/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools
    - name: mpy-cross
      run: make -C mpy-cross -j2
    - name: Setup build failure matcher
      run: echo "::add-matcher::$GITHUB_WORKSPACE/.github/workflows/match-build-fail.json"
    - name: build
      run: |
        source $IDF_PATH/export.sh
        python3 -u build_release_files.py
      working-directory: tools
      shell: bash
      env:
        IDF_PATH: ${{ github.workspace }}/ports/espressif/esp-idf
        IDF_TOOLS_PATH: ${{ github.workspace }}/.idf_tools
        BOARDS: ${{ matrix.board }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.board }}
        path: bin/${{ matrix.board }}
    - name: Upload to S3
      run: "[ -z \"$AWS_ACCESS_KEY_ID\" ] || aws s3 cp bin/ s3://adafruit-circuit-python/bin/ --recursive --no-progress --region us-east-1"
      env:
        AWS_PAGER: ''
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'adafruit') || (github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'rerequested'))
